// Code generated by go-queryset. DO NOT EDIT.
package go_queryset

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/lib/pq"
	"gorm.io/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set TagQuerySet

// TagQuerySet is an queryset type for Tag
type TagQuerySet struct {
	db *gorm.DB
}

// NewTagQuerySet constructs new TagQuerySet
func NewTagQuerySet(db *gorm.DB) TagQuerySet {
	return TagQuerySet{
		db: db.Model(&Tag{}),
	}
}

func (qs TagQuerySet) w(db *gorm.DB) TagQuerySet {
	return NewTagQuerySet(db)
}

func (qs TagQuerySet) Select(fields ...TagDBSchemaField) TagQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Tag) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Tag) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// AliasesEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) AliasesEq(aliases pq.StringArray) TagQuerySet {
	return qs.w(qs.db.Where("aliases = ?", aliases))
}

// AliasesIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) AliasesIn(aliases ...pq.StringArray) TagQuerySet {
	if len(aliases) == 0 {
		qs.db.AddError(errors.New("must at least pass one aliases in AliasesIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("aliases IN (?)", aliases))
}

// AliasesNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) AliasesNe(aliases pq.StringArray) TagQuerySet {
	return qs.w(qs.db.Where("aliases != ?", aliases))
}

// AliasesNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) AliasesNotIn(aliases ...pq.StringArray) TagQuerySet {
	if len(aliases) == 0 {
		qs.db.AddError(errors.New("must at least pass one aliases in AliasesNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("aliases NOT IN (?)", aliases))
}

// All is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) All(ret *[]*Tag) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Count() (int64, error) {
	var count int64
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtEq(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtGt(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtGte(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtLt(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtLte(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtNe(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Delete() error {
	return qs.db.Delete(&Tag{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(&Tag{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(&Tag{})
	return db.RowsAffected, db.Error
}

// DisabledAtEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledAtEq(disabledAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("disabled_at = ?", disabledAt))
}

// DisabledAtEqP is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledAtEqP(disabledAt *time.Time) TagQuerySet {
	if disabledAt == nil {
		return qs.DisabledAtIsNull()
	} else {
		return qs.DisabledAtEq(*disabledAt)
	}
}

// DisabledAtGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledAtGt(disabledAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("disabled_at > ?", disabledAt))
}

// DisabledAtGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledAtGte(disabledAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("disabled_at >= ?", disabledAt))
}

// DisabledAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledAtIsNotNull() TagQuerySet {
	return qs.w(qs.db.Where("disabled_at IS NOT NULL"))
}

// DisabledAtIsNull is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledAtIsNull() TagQuerySet {
	return qs.w(qs.db.Where("disabled_at IS NULL"))
}

// DisabledAtLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledAtLt(disabledAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("disabled_at < ?", disabledAt))
}

// DisabledAtLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledAtLte(disabledAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("disabled_at <= ?", disabledAt))
}

// DisabledAtNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledAtNe(disabledAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("disabled_at != ?", disabledAt))
}

// DisabledByEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByEq(disabledBy int64) TagQuerySet {
	return qs.w(qs.db.Where("disabled_by = ?", disabledBy))
}

// DisabledByEqP is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByEqP(disabledBy *int64) TagQuerySet {
	if disabledBy == nil {
		return qs.DisabledByIsNull()
	} else {
		return qs.DisabledByEq(*disabledBy)
	}
}

// DisabledByGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByGt(disabledBy int64) TagQuerySet {
	return qs.w(qs.db.Where("disabled_by > ?", disabledBy))
}

// DisabledByGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByGte(disabledBy int64) TagQuerySet {
	return qs.w(qs.db.Where("disabled_by >= ?", disabledBy))
}

// DisabledByIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByIn(disabledBy ...int64) TagQuerySet {
	if len(disabledBy) == 0 {
		qs.db.AddError(errors.New("must at least pass one disabledBy in DisabledByIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("disabled_by IN (?)", disabledBy))
}

// DisabledByIsNotNull is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByIsNotNull() TagQuerySet {
	return qs.w(qs.db.Where("disabled_by IS NOT NULL"))
}

// DisabledByIsNull is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByIsNull() TagQuerySet {
	return qs.w(qs.db.Where("disabled_by IS NULL"))
}

// DisabledByLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByLt(disabledBy int64) TagQuerySet {
	return qs.w(qs.db.Where("disabled_by < ?", disabledBy))
}

// DisabledByLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByLte(disabledBy int64) TagQuerySet {
	return qs.w(qs.db.Where("disabled_by <= ?", disabledBy))
}

// DisabledByNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByNe(disabledBy int64) TagQuerySet {
	return qs.w(qs.db.Where("disabled_by != ?", disabledBy))
}

// DisabledByNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledByNotIn(disabledBy ...int64) TagQuerySet {
	if len(disabledBy) == 0 {
		qs.db.AddError(errors.New("must at least pass one disabledBy in DisabledByNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("disabled_by NOT IN (?)", disabledBy))
}

// DisabledEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledEq(disabled bool) TagQuerySet {
	return qs.w(qs.db.Where("disabled = ?", disabled))
}

// DisabledIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledIn(disabled ...bool) TagQuerySet {
	if len(disabled) == 0 {
		qs.db.AddError(errors.New("must at least pass one disabled in DisabledIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("disabled IN (?)", disabled))
}

// DisabledNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledNe(disabled bool) TagQuerySet {
	return qs.w(qs.db.Where("disabled != ?", disabled))
}

// DisabledNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledNotIn(disabled ...bool) TagQuerySet {
	if len(disabled) == 0 {
		qs.db.AddError(errors.New("must at least pass one disabled in DisabledNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("disabled NOT IN (?)", disabled))
}

// DisabledReasonEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonEq(disabledReason string) TagQuerySet {
	return qs.w(qs.db.Where("disabled_reason = ?", disabledReason))
}

// DisabledReasonEqP is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonEqP(disabledReason *string) TagQuerySet {
	if disabledReason == nil {
		return qs.DisabledReasonIsNull()
	} else {
		return qs.DisabledReasonEq(*disabledReason)
	}
}

// DisabledReasonGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonGt(disabledReason string) TagQuerySet {
	return qs.w(qs.db.Where("disabled_reason > ?", disabledReason))
}

// DisabledReasonGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonGte(disabledReason string) TagQuerySet {
	return qs.w(qs.db.Where("disabled_reason >= ?", disabledReason))
}

// DisabledReasonIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonIn(disabledReason ...string) TagQuerySet {
	if len(disabledReason) == 0 {
		qs.db.AddError(errors.New("must at least pass one disabledReason in DisabledReasonIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("disabled_reason IN (?)", disabledReason))
}

// DisabledReasonIsNotNull is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonIsNotNull() TagQuerySet {
	return qs.w(qs.db.Where("disabled_reason IS NOT NULL"))
}

// DisabledReasonIsNull is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonIsNull() TagQuerySet {
	return qs.w(qs.db.Where("disabled_reason IS NULL"))
}

// DisabledReasonLike is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonLike(disabledReason string) TagQuerySet {
	return qs.w(qs.db.Where("disabled_reason LIKE ?", disabledReason))
}

// DisabledReasonLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonLt(disabledReason string) TagQuerySet {
	return qs.w(qs.db.Where("disabled_reason < ?", disabledReason))
}

// DisabledReasonLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonLte(disabledReason string) TagQuerySet {
	return qs.w(qs.db.Where("disabled_reason <= ?", disabledReason))
}

// DisabledReasonNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonNe(disabledReason string) TagQuerySet {
	return qs.w(qs.db.Where("disabled_reason != ?", disabledReason))
}

// DisabledReasonNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonNotIn(disabledReason ...string) TagQuerySet {
	if len(disabledReason) == 0 {
		qs.db.AddError(errors.New("must at least pass one disabledReason in DisabledReasonNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("disabled_reason NOT IN (?)", disabledReason))
}

// DisabledReasonNotlike is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DisabledReasonNotlike(disabledReason string) TagQuerySet {
	return qs.w(qs.db.Where("disabled_reason NOT LIKE ?", disabledReason))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) GetUpdater() TagUpdater {
	return NewTagUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDEq(ID int64) TagQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDGt(ID int64) TagQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDGte(ID int64) TagQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDIn(ID ...int64) TagQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDLt(ID int64) TagQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDLte(ID int64) TagQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDNe(ID int64) TagQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDNotIn(ID ...int64) TagQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Limit(limit int) TagQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameEq(name string) TagQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameGt(name string) TagQuerySet {
	return qs.w(qs.db.Where("name > ?", name))
}

// NameGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameGte(name string) TagQuerySet {
	return qs.w(qs.db.Where("name >= ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameIn(name ...string) TagQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameLike is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameLike(name string) TagQuerySet {
	return qs.w(qs.db.Where("name LIKE ?", name))
}

// NameLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameLt(name string) TagQuerySet {
	return qs.w(qs.db.Where("name < ?", name))
}

// NameLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameLte(name string) TagQuerySet {
	return qs.w(qs.db.Where("name <= ?", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameNe(name string) TagQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameNotIn(name ...string) TagQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// NameNotlike is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameNotlike(name string) TagQuerySet {
	return qs.w(qs.db.Where("name NOT LIKE ?", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Offset(offset int) TagQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TagQuerySet) One(ret *Tag) error {
	return qs.db.First(ret).Error
}

// OrderAscByAliases is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByAliases() TagQuerySet {
	return qs.w(qs.db.Order("aliases ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByCreatedAt() TagQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDisabled is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByDisabled() TagQuerySet {
	return qs.w(qs.db.Order("disabled ASC"))
}

// OrderAscByDisabledAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByDisabledAt() TagQuerySet {
	return qs.w(qs.db.Order("disabled_at ASC"))
}

// OrderAscByDisabledBy is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByDisabledBy() TagQuerySet {
	return qs.w(qs.db.Order("disabled_by ASC"))
}

// OrderAscByDisabledReason is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByDisabledReason() TagQuerySet {
	return qs.w(qs.db.Order("disabled_reason ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByID() TagQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByName is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByName() TagQuerySet {
	return qs.w(qs.db.Order("name ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByUpdatedAt() TagQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByAliases is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByAliases() TagQuerySet {
	return qs.w(qs.db.Order("aliases DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByCreatedAt() TagQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDisabled is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByDisabled() TagQuerySet {
	return qs.w(qs.db.Order("disabled DESC"))
}

// OrderDescByDisabledAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByDisabledAt() TagQuerySet {
	return qs.w(qs.db.Order("disabled_at DESC"))
}

// OrderDescByDisabledBy is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByDisabledBy() TagQuerySet {
	return qs.w(qs.db.Order("disabled_by DESC"))
}

// OrderDescByDisabledReason is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByDisabledReason() TagQuerySet {
	return qs.w(qs.db.Order("disabled_reason DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByID() TagQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByName is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByName() TagQuerySet {
	return qs.w(qs.db.Order("name DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByUpdatedAt() TagQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtEq(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtGt(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtGte(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtLt(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtLte(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtNe(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetAliases is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetAliases(aliases pq.StringArray) TagUpdater {
	u.fields[string(TagDBSchema.Aliases)] = aliases
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetCreatedAt(createdAt time.Time) TagUpdater {
	u.fields[string(TagDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDisabled is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetDisabled(disabled bool) TagUpdater {
	u.fields[string(TagDBSchema.Disabled)] = disabled
	return u
}

// SetDisabledAt is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetDisabledAt(disabledAt *time.Time) TagUpdater {
	u.fields[string(TagDBSchema.DisabledAt)] = disabledAt
	return u
}

// SetDisabledBy is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetDisabledBy(disabledBy *int64) TagUpdater {
	u.fields[string(TagDBSchema.DisabledBy)] = disabledBy
	return u
}

// SetDisabledReason is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetDisabledReason(disabledReason *string) TagUpdater {
	u.fields[string(TagDBSchema.DisabledReason)] = disabledReason
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetID(ID int64) TagUpdater {
	u.fields[string(TagDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetName(name string) TagUpdater {
	u.fields[string(TagDBSchema.Name)] = name
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetUpdatedAt(updatedAt time.Time) TagUpdater {
	u.fields[string(TagDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u TagUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TagUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set TagQuerySet

// ===== BEGIN of Tag modifiers

// TagDBSchemaField describes database schema field. It requires for method 'Update'
type TagDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f TagDBSchemaField) String() string {
	return string(f)
}

// TagDBSchema stores db field names of Tag
var TagDBSchema = struct {
	ID             TagDBSchemaField
	CreatedAt      TagDBSchemaField
	UpdatedAt      TagDBSchemaField
	Name           TagDBSchemaField
	Aliases        TagDBSchemaField
	Disabled       TagDBSchemaField
	DisabledReason TagDBSchemaField
	DisabledAt     TagDBSchemaField
	DisabledBy     TagDBSchemaField
}{

	ID:             TagDBSchemaField("id"),
	CreatedAt:      TagDBSchemaField("created_at"),
	UpdatedAt:      TagDBSchemaField("updated_at"),
	Name:           TagDBSchemaField("name"),
	Aliases:        TagDBSchemaField("aliases"),
	Disabled:       TagDBSchemaField("disabled"),
	DisabledReason: TagDBSchemaField("disabled_reason"),
	DisabledAt:     TagDBSchemaField("disabled_at"),
	DisabledBy:     TagDBSchemaField("disabled_by"),
}

// Update updates Tag fields by primary key
// nolint: dupl
func (o *Tag) Update(db *gorm.DB, fields ...TagDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":              o.ID,
		"created_at":      o.CreatedAt,
		"updated_at":      o.UpdatedAt,
		"name":            o.Name,
		"aliases":         o.Aliases,
		"disabled":        o.Disabled,
		"disabled_reason": o.DisabledReason,
		"disabled_at":     o.DisabledAt,
		"disabled_by":     o.DisabledBy,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Tag %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TagUpdater is an Tag updates manager
type TagUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTagUpdater creates new Tag updater
// nolint: dupl
func NewTagUpdater(db *gorm.DB) TagUpdater {
	return TagUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Tag{}),
	}
}

// ===== END of Tag modifiers

// ===== END of all query sets
